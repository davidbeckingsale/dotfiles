" .vimrc
" Author: David Beckingsale
" Source: https://github.com/davidbeckingsale/dotfiles/blob/master/.vimrc
"
" Preamble {{{

filetype off
if &compatible
  set nocompatible
endif
let mapleader=","

set rtp+=~/.local/share/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.cache/dein')
  call dein#begin('~/.cache/dein')

  call dein#add('Shougo/dein.vim')
  call dein#add('Shougo/denite.nvim')
  call dein#add('Valloric/YouCompleteMe', { 'build' : './install.py --clang-completer' })
  call dein#add('tpope/vim-fugitive')
  call dein#add('scrooloose/nerdtree')
  call dein#add('vim-airline/vim-airline')
  call dein#add('vim-airline/vim-airline-themes')
  call dein#add('davidbeckingsale/Smyck-Color-Scheme')
  call dein#add('endel/vim-github-colorscheme')
  call dein#add('nanotech/jellybeans.vim')
  call dein#add('tpope/vim-fugitive')
  call dein#add('junegunn/fzf', { 'build': './install --all'} )
  call dein#add('junegunn/fzf.vim')
  call dein#add('edkolev/tmuxline.vim')
  call dein#add('tpope/vim-dispatch')

  call dein#end()
  call dein#save_state()
endif


" Basic settings {{{

set hidden
set showmode
set tabstop=2
set shiftwidth=2
set expandtab
set cpoptions+=$
set linespace=1
set foldcolumn=1
set listchars=tab:▸\ ,eol:¬
set list
set guioptions=ac
set lazyredraw
set title
set synmaxcol=800
set ch=2
set vb
set backspace=2
set laststatus=2
set mousehide
set timeoutlen=400
set history=1000
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo
set scrolloff=3
set virtualedit+=block
set colorcolumn=80
" The highlighting was getting annoying in code, should turn this on for
" .txt,.md and .tex though
set nospell
set completeopt=menuone,longest,preview
set foldlevel=99
set number
set cursorline

" Store swap files in temp
set directory=/tmp 
set noswapfile

set undodir=/tmp/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000

" More natural window split settings
set splitbelow
set splitright

syntax enable
filetype plugin on
filetype indent on

au bufwritepost .vimrc source $MYVIMRC

au VimResized * :wincmd =
" Searching {{{

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

set ignorecase
set smartcase
set incsearch
set showmatch
set wrapscan
set hlsearch
set gdefault

" }}}
" Wildmenu completion {{{
" Taken from http://bitbucket.org/sjl/dotfiles/src/tip/vim/, looks sensible!

set wildmenu
set wildmode=list:longest,full

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" Clojure/Leiningen
set wildignore+=classes

" }}}
" Jump to last edited position on re-open {{{

augroup last_cursor_pos
    autocmd!
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
augroup END

" }}}
"
" Neovim specific {{{
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
" }}}
" }}}
" remaps -------- {{{
nnoremap <silent> ,ev :e $MYVIMRC<cr>

" Shortcut to rapidly toggle `set list`
nnoremap <leader>l :set list!<CR>

" Open buffer in Marked
nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>
nnoremap <leader>r :silent !open -a Finder '%:p:h'<cr>

inoremap <c-e> <esc>A
inoremap <c-a> <esc>I
inoremap jj <ESC>

nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

" Mark trailing whitespace as an error
nnoremap <leader>w match ErrorMsg /\v +$/

" grep for word under cursor
nnoremap <leader>g :silent execute "grep! -R " . shellescape("<cWORD>") . " ."<cr>:copen<cr>

" Quickfix stuff
nnoremap <leader>cc :ccl<cr>
nnoremap <leader>n :cn<cr>
nnoremap <leader>p :cp<cr>

" No more arrow-keys!
map <Left> <nop>
map <Right> <nop>
map <Down> <nop>
map <Up> <nop>

" Hard Mode!
" map j <nop>
" map k <nop>
" map h <nop>
" map l <nop>

" Switch buffers quickly
nnoremap <leader><leader> <C-^>

" Clear search highlights on enter
nnoremap <CR> :noh<CR>

" Yank text to OS X clipboard
noremap <leader>y "*y

" Open and save files with leader
nnoremap <leader>w :w<CR>

" Get into normal mode with ESC from terminal
tnoremap <ESC> <C-\><C-n>
" }}}
" FileType settings -------- {{{

augroup filetype_python
    autocmd!
    au FileType py set autoindent
    au FileType py set smartindent
    au FileType py set textwidth=79
    set ofu=syntaxcomplete#Complete
augroup END

augroup filetype_vim
    autocmd!
    auto FileType vim setlocal foldmethod=marker
augroup END 

augroup filetype_ruby
    autocmd!
    au FileType ruby nnoremap <leader>a :A<cr>
    au FileType ruby nnoremap <leader>r :R<cr>
augroup END

augroup filetype_tex
    autocmd!
    au FileType tex set linebreak
    au FileType tex set nolist 
    au FileType tex set spell 
    au FileType tex set makeprg='make'
augroup END

augroup filetype_c
    autocmd!
    au FileType c set foldmethod=syntax
    au FileType cpp set foldmethod=syntax
    au BufRead,BufNewFile *.C set filetype=cpp
augroup END

augroup filetype_md
    autocmd!
    au BufRead,BufNewFile *.md setlocal textwidth=80
augroup END

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init()
augroup END

" }}}
" Plugin settings {{{
" Powerline {{{

let g:Powerline_symbols = 'fancy'
let g:Powerline_cache_enabled = 1

" }}}
" Vim-Latex {{{
let g:Tex_DefaultTargetFormat = 'pdf'

let g:Tex_CompileRule_dvi = 'latex --interaction=nonstopmode $*'
let g:Tex_CompileRule_ps = 'dvips -Pwww -o $*.ps $*.dvi'
let g:Tex_CompileRule_pspdf = 'ps2pdf $*.ps'
let g:Tex_CompileRule_dvipdf = 'dvipdfm $*.dvi'
let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 --interaction=nonstopmode $*'

let g:Tex_ViewRule_dvi = 'texniscope'
let g:Tex_ViewRule_ps = 'Preview'
let g:Tex_ViewRule_pdf = 'Preview'

let g:Tex_FormatDependency_ps  = 'dvi,ps'
let g:Tex_FormatDependency_pspdf = 'dvi,ps,pspdf'
let g:Tex_FormatDependency_dvipdf = 'dvi,dvipdf'

let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1
" }}}
" NERD Tree {{{

noremap  <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>

augroup ps_nerdtree
    au!

    au Filetype nerdtree setlocal nolist
augroup END

let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$', 'whoosh_index',
                    \ 'xapian_index', '.*.pid', 'monitor.py',
                    \ '.*\.o$', 'db.db', 'tags.bak']

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDChristmasTree = 1
let NERDTreeChDirMode = 2
let NERDTreeMapJumpFirstChild = 'gK'
let NERDTreeHijackNetrw = 0

" }}}
" Fugitive {{{

nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gl :shell git gl -18<cr>:wincmd \|<cr>

augroup ft_fugitive
    au!

    au BufNewFile,BufRead .git/index setlocal nolist
augroup END
" }}}
" SuperTab {{{

let g:SuperTabDefaultCompletionType = "context"

"}}}
" Syntastic settings {{{

let g:syntastic_check_on_open = 1
let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'

" }}}
" Denite settings {{{
nnoremap <leader>f :<C-u>Denite file_rec<CR>
nnoremap <leader>b :<C-u>Denite buffer<CR>
nnoremap <leader>t :<C-u>Denite file_rec buffer<CR>
" }}}
"
" Airline settings {{{
let g:airline_powerline_fonts = 1
let g:airline_theme='cool'
" }}}
" Vim-Pencil settings {{{
" let g:pencil#wrapModeDefault = 'soft'
" let g:pencil#textwidth = 80
" let g:airline_section_x = '%{PencilMode()}'
" }}}
" scratch.vim settings {{{
nnoremap <leader>s :Scratch<CR>
" }}}
" ultisnips settings {{{
let g:UltiSnipsExpandTrigger="<c-e>"
" }}}

" }}}
"
" clang_complete settings {{{
let g:clang_library_path='/usr/local/opt/llvm/lib'
let g:clang_complete_auto = 0
let g:clang_auto_select = 0
let g:clang_omnicppcomplete_compliance = 0
let g:clang_make_default_keymappings = 0
" }}}
" deoplete settings {{{
let g:deoplete#enable_at_startup = 1
" }}}
" Environment settings {{{

if has('gui_running')

    if has('gui_macvim')
        set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline:h12
    else
        set guifont=Terminus\ 10
    endif

    set background=light
    colorscheme solarized

else

    set background=dark
    colorscheme jellybeans

endif

" }}}
